# API-first development with OpenAPI
# This file will be used at compile time to generate Spring-MVC endpoint stubs using openapi-generator
openapi: '3.0.1'
info:
  title: 'newbie'
  version: 0.0.1
servers:
  - url: http://localhost:8080/api
    description: Development server
  - url: https://localhost:8080/api
    description: Development server with TLS Profile
paths:
  /reservations:
    get:
      tags:
      - user
      summary: Get reservations by user name
      description: "Reservations."
      operationId: "getReservations"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          content:
           application/json:
              schema:
                $ref: "#/components/schemas/ArrayOfReservations"
        "404":
          description: "Reservations not found"
  /reservations/{id}:
    get:
      tags:
      - id
      summary: Get reservation by id
      description: "Reservations."
      operationId: "getReservationById"
      parameters:
      - name: id
        in: path
        description: The reservation id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: "successful operation"
          content:
           application/json:
              schema:
                $ref: "#/components/schemas/Reservation"
        "404":
          description: "Reservation not found"
  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        400:
          description: Invalid username/password supplied
          content: {}
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
          content: {}
components:
  responses:
    Problem:
      description: error occurred - see status code and problem object for more information.
      content:
        'application/problem+json':
          schema:
            $ref: 'https://opensource.zalando.com/problem/schema.yaml#/Problem'
  schemas:
    Reservation:
      type: object
      properties:
        id:
            type: integer
            format: int64
        guestFullName:
            type: string
        initialDate:
          type: date
        resStatus:
            type: string
            enum:
              - SH
              - OF
              - BK
              - CL
              - TM
              - CX
              - CT
              - QT
              - WL
        ship:
          type: string
        portFrom:
          type: string
        from:
          type: date
        portTo:
          type: string
        to:
          type: date

    ArrayOfReservations:
      type: array
      items:
          $ref: "#/components/schemas/Reservation"

  securitySchemes:
    jwt:
      type: http
      description: JWT Authentication
      scheme: bearer
      bearerFormat: JWT
    basic:
      type: http
      description: Basic Authentication
      scheme: basic
security:
  - jwt: []
  - basic: []
